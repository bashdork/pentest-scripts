#!/bin/bash

# AUTHOR : Rey Cortes
# www.github.com/odlanyer37
# odlanyer37@gmail.com

IFS=$'\n'  #Make newlines the only separator.

[ -s report_table.csv ] && rm report_table.csv # If the file exists, remove it.

function f_services4report() {

for file in $(find -name "*gnmap"); do

	if [ "$(cat $file | grep -P '\w*/open/\w*' |awk '{print $2}')" != "" ] # If the file has open ports.

	then

        	echo "Parsing...    - $file"

	else

        	echo "No open ports - $file"

	fi


	for ip in $(cat $file | grep -P '\w*/open/\w*' |awk '{print $2}');do

        	counter=1

        	for port in $(cat $file |grep "$ip " | grep -oP '\w*/open/\w*' |cut -d/ -f1);do


                	PROTOCOL=$(cat $file |grep "$ip " | grep -oP '\w*/open/\w*'|head -n $counter |tail -n 1|cut -d/ -f3)

                	SERVICES=$(cat $file |grep "$ip " | grep -o 'open/[^ ]*' |awk -F '//|//' '{print $2}' |head -n $counter |tail -n 1)

			IPs=$(cat $file | grep " $port/open/" |awk '{print $2}')

                	echo -e "\"$IPs\",$port,$PROTOCOL,$SERVICES!"  >> report_table_temp

                	counter=$[$counter+1]

        	done

	done
done

# Sorting:

if [ -s report_table_temp ]

then

	sed -i '1s/^/+/' report_table_temp # Appends a + to the beginning of the file to help with sorting.

	r_counter=1

	for r_port in $(cat report_table_temp |tr "\n" "+" |tr "!" "\n" |tr "," "\t" | sort -n -k2 -u |awk '{print $2}' |grep -v -e '^$');do

		r_ips=$(cat report_table_temp |tr "\n" "+" |tr "!" "\n" |tr "," "\t" | sort -n -k2 | awk '!a[$1,$2,$3]++' |grep $'\t'$r_port$'\t' |awk '{print $1}' |tr "+" "\n" |grep -v -e '^$' |sed 's:"::g')

		r_protocol=$(cat report_table_temp |tr "\n" "+" |tr "!" "\n" |tr "," "\t" | sort -n -k2 -u |awk '{print $3}' |grep -v -e '^$' |head -n $r_counter |tail -n 1)

		r_services=$(cat report_table_temp |tr "\n" "+" |tr "!" "\n" |tr "," "\t" | sort -n -k2 -u |awk '{print $4}' |grep -v -e '^$' |head -n $r_counter |tail -n 1)

		echo -e "\"$r_ips\",$r_port,$r_protocol,$r_services"  >> report_table.csv

		r_counter=$[$r_counter+1]

	done


fi

[ -s report_table_temp ] && rm report_table_temp

if [ -s report_table.csv ]

then

	echo "**********************************************"
	echo "report_table.csv created."
	echo "**********************************************"

else

	[ -f report_table.csv ] && rm report_table.csv # If the file was created but is empty, remove it.

fi

}

function f_banners() {

if [ "$(cat $1 | grep -oP '\w*/open/\w*'|cut -d/ -f 1 |sort -u)" != "" ] # If the file has open ports.

then

        echo "Parsing...    - $1"

else

        echo "No open ports - $1"

fi

for b_ip in $(cat $1 | grep -P '\w*/open/\w*' |awk '{print $2}');do

	for b_port in $(cat $1 |grep $b_ip | grep -oP '\w*/open/\w*' |cut -d/ -f1);do

		amap -T 2 -B $b_ip $b_port |grep Banner | tr -d "Banner on " |tr ":" "\t" |tr "/tcp" "\ttcp" |tr "/udp" "\tudp" |tee -a banners

	done

done

files_counter=$[$files_counter+1]

if [ $files_counter -eq $(find -name "*gnmap" | wc -l) ] # If files counter has reched the number of total files.

then

	if [ -s banners ] # If the file exists and it's not empty.

        then

		if [ -s old_banners_temp ]

		then

			echo "Data previously in banners file:"
	        	cat old_banners_temp # If there are old banners in the file, print them so the removing duplicates part make sense.
			rm old_banners_temp
		fi

		if [ "$(cat banners |wc -l)" -gt "$(sort -u banners |wc -l)" ] # Checks if there are duplicates.

        	then

                	printf "**********************************************\nRemoving duplicates...\n**********************************************\n"
                	cat banners |sort -u -o banners
                	cat banners
			echo "**********************************************"
			echo "banners file created."
			echo "**********************************************"
		else

                        echo "**********************************************"
                        echo "banners file created."
                        echo "**********************************************"

        	fi

	else

        	echo "No banners."
		[ -f banners ] && rm  banners # If file was created but it's empty, remove it.

        fi


fi


}

function f_services() {

if [ "$(cat $1 | grep -oP '\w*/open/\w*'|cut -d/ -f 1 |sort -u)" != "" ] # If the file has any open ports, parse it.

then

	echo "Parsing...    - $1"

else

	echo "No open ports - $1"

fi

s_file_counter=$[$s_file_counter+1]

for ip in $(cat $1 | grep -P '\w*/open/\w*' |awk '{print $2}');do

	if [ "$(cat $1 |grep $ip | grep -oP '\w*/open/\w*' |cut -d/ -f1)" != "" ]

        then

	        p_NoOpenPorts="false"  # Checking If there's at least one file with open ports.

        fi

        counter=1

	for port in $(cat $1 |grep "$ip " | grep -oP '\w*/open/\w*' |cut -d/ -f1);do


		PROTOCOL=$(cat $1 |grep "$ip " | grep -oP '\w*/open/\w*'|head -n $counter |tail -n 1|cut -d/ -f3)

		SERVICES=$(cat $1 |grep "$ip " | grep -o 'open/[^ ]*' |awk -F '//|//' '{print $2}' |head -n $counter |tail -n 1)

#		BANNER=$(cat $1 |grep "$ip " | grep -o 'open/[^,]*' |awk -F '//|//' '{print $3}' |head -n $counter |tail -n 1 ||grep -o '[^/]*' |head -1) # makes it look dirty. Maybe later?

		echo $ip$'\t'$port$'\t'$PROTOCOL$'\t'$SERVICES >> services

		counter=$[$counter+1]

	done


done

[ -s services ] && : || touch services # If there's no open ports, services file is never created, which causes problems. This might be dirty...

if [ -s services ]

then

	sort -u services |sort -n -k2 > services_sorting # Remove any duplicates and sort the file by ports.

	cat services_sorting |awk '!a[$1,$2,$3]++' > services # Removes duplicates with different banners due to different nmap flags. (Anti Milos)

	rm services_sorting

	if [ "$s_file_counter" == "$(find -name "*gnmap" | wc -l)" ] # If files counter has reached the number of total files.

	then


		if [ "$p_NoOpenPorts" != "false" ]

		then

        		: # The echo No ports was redundant.

		else

        		echo "**********************************************"
        		echo "             SERVICES             "
        		echo "**********************************************"
			cat services |sort -n -k2 |uniq > services_temp # Remove any duplicates from older service files.
			cat services_temp |tee services
			echo "**********************************************"
			rm services_temp
			echo "services file created."
			echo "**********************************************"

		fi

        fi


else



	rm services

fi

}

function f_nmap() {

[ -d nmap_results ] && : || mkdir nmap_results

if [ "$(echo "$1" | grep f)" != "" ] # Check if the full tcp scan flag -f was used.

then

	if [ "$(find -name "top_ports.gnmap" |head -1 )" == "" ] # If regular ports have been scanned, exclude them from the full tcp scan.

	then

		printf "**********************************************\nFULL TCP SCAN\n**********************************************\n"

		sleep 2

		nmap -vv -T4 -sS -p 0-65535 -iL hosts -oA nmap_results/tcp_full

	else

		sleep 2

		printf "**********************************************\nFULL TCP SCAN [Exluding Top Ports.]\n**********************************************\n"

		nmap -vv -T4 --exclude-ports 1,3-4,6-7,9,13,17,19-26,30,32-33,37,42-43,49,53,70,79-85,88-90,99-100,106,109-111,113,119,125,135,139,143-144,146,161,163,179,199,211-212,222,254-256,259,264,280,301,306,311,340,366,389,406-407,416-417,425,427,443-445,458,464-465,481,497,500,512-515,524,541,543-545,548,554-555,563,587,593,616-617,625,631,636,646,648,666-668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,800-801,808,843,873,880,888,898,900-903,911-912,981,987,990,992-993,995,999-1002,1007,1009-1011,1021-1100,1102,1104-1108,1110-1114,1117,1119,1121-1124,1126,1130-1132,1137-1138,1141,1145,1147-1149,1151-1152,1154,1163-1166,1169,1174-1175,1183,1185-1187,1192,1198-1199,1201,1213,1216-1218,1233-1234,1236,1244,1247-1248,1259,1271-1272,1277,1287,1296,1300-1301,1309-1311,1322,1328,1334,1352,1417,1433-1434,1443,1455,1461,1494,1500-1501,1503,1521,1524,1533,1556,1580,1583,1594,1600,1641,1658,1666,1687-1688,1700,1717-1721,1723,1755,1761,1782-1783,1801,1805,1812,1839-1840,1862-1864,1875,1900,1914,1935,1947,1971-1972,1974,1984,1998-2010,2013,2020-2022,2030,2033-2035,2038,2040-2043,2045-2049,2065,2068,2099-2100,2103,2105-2107,2111,2119,2121,2126,2135,2144,2160-2161,2170,2179,2190-2191,2196,2200,2222,2251,2260,2288,2301,2323,2366,2381-2383,2393-2394,2399,2401,2492,2500,2522,2525,2557,2601-2602,2604-2605,2607-2608,2638,2701-2702,2710,2717-2718,2725,2800,2809,2811,2869,2875,2909-2910,2920,2967-2968,2998,3000-3001,3003,3005-3007,3011,3013,3017,3030-3031,3052,3071,3077,3128,3168,3211,3221,3260-3261,3268-3269,3283,3300-3301,3306,3322-3325,3333,3351,3367,3369-3372,3389-3390,3404,3476,3493,3517,3527,3546,3551,3580,3659,3689-3690,3703,3737,3766,3784,3800-3801,3809,3814,3826-3828,3851,3869,3871,3878,3880,3889,3905,3914,3918,3920,3945,3971,3986,3995,3998,4000-4006,4045,4111,4125-4126,4129,4224,4242,4279,4321,4343,4443-4446,4449,4550,4567,4662,4848,4899-4900,4998,5000-5004,5009,5030,5033,5050-5051,5054,5060-5061,5080,5087,5100-5102,5120,5190,5200,5214,5221-5222,5225-5226,5269,5280,5298,5357,5405,5414,5431-5432,5440,5500,5510,5544,5550,5555,5560,5566,5631,5633,5666,5678-5679,5718,5730,5800-5802,5810-5811,5815,5822,5825,5850,5859,5862,5877,5900-5904,5906-5907,5910-5911,5915,5922,5925,5950,5952,5959-5963,5987-5989,5998-6007,6009,6025,6059,6100-6101,6106,6112,6123,6129,6156,6346,6389,6502,6510,6543,6547,6565-6567,6580,6646,6666-6669,6689,6692,6699,6779,6788-6789,6792,6839,6881,6901,6969,7000-7002,7004,7007,7019,7025,7070,7100,7103,7106,7200-7201,7402,7435,7443,7496,7512,7625,7627,7676,7741,7777-7778,7800,7911,7920-7921,7937-7938,7999-8002,8007-8011,8021-8022,8031,8042,8045,8080-8090,8093,8099-8100,8180-8181,8192-8194,8200,8222,8254,8290-8292,8300,8333,8383,8400,8402,8443,8500,8600,8649,8651-8652,8654,8701,8800,8873,8888,8899,8994,9000-9003,9009-9011,9040,9050,9071,9080-9081,9090-9091,9099-9103,9110-9111,9200,9207,9220,9290,9415,9418,9485,9500,9502-9503,9535,9575,9593-9595,9618,9666,9876-9878,9898,9900,9917,9929,9943-9944,9968,9998-10004,10009-10010,10012,10024-10025,10082,10180,10215,10243,10566,10616-10617,10621,10626,10628-10629,10778,11110-11111,11967,12000,12174,12265,12345,13456,13722,13782-13783,14000,14238,14441-14442,15000,15002-15004,15660,15742,16000-16001,16012,16016,16018,16080,16113,16992-16993,17877,17988,18040,18101,18988,19101,19283,19315,19350,19780,19801,19842,20000,20005,20031,20221-20222,20828,21571,22939,23502,24444,24800,25734-25735,26214,27000,27352-27353,27355-27356,27715,28201,30000,30718,30951,31038,31337,32768-32785,33354,33899,34571-34573,35500,38292,40193,40911,41511,42510,44176,44442-44443,44501,45100,48080,49152-49161,49163,49165,49167,49175-49176,49400,49999-50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055-55056,55555,55600,56737-56738,57294,57797,58080,60020,60443,61532,61900,62078,63331,64623,64680,65000,65129,65389 -iL hosts -oA nmap_results/exclude_top_ports_tcp_full
	fi

elif [ "$(echo "$1" | grep u)" != "" ] # Check if the udp scan flag -u was used.

then

	printf "**********************************************\nFULL UDP SCAN\n**********************************************\n"

	sleep 2

	nmap -vv -T4 -sU -p 0-65535 -iL hosts -oA nmap_results/udp_full

else

	printf "**********************************************\nREGULAR TCP SCAN [Top Ports]\n**********************************************\n"

	sleep 2

	nmap -vv -F -T4 -sS -iL hosts -oA nmap_results/top_ports

fi

echo "**********************************************"
echo "Grabbing banners..."
echo "**********************************************"

for file in $(find -name "*gnmap"); do

	f_banners $file

done

echo "**********************************************"
echo "Looking for services..."
echo "**********************************************"

for file in $(find -name "*gnmap"); do

        f_services $file

done

echo "**********************************************"
echo "Creating open ports table for the report..."
echo "**********************************************"

f_services4report


exit # END OF SCRIPT

}

function f_expand() {

echo "**********************************************"
echo "    Hosts             "
echo "**********************************************"

nmap -sL -n -iL scope |grep report |cut -d " " -f 5,6 |tr -d "()" |cut -d " " -f2 |sort -u |tee -a hosts

f_nmap $1

}

function f_checkForScope() {

[ -f scope ] && f_expand $1 || echo "There is no hosts or scope file in this folder."

}

function f_start() {


if [ -f hosts ]

then

	echo "**********************************************"
	echo "    Hosts             "
	echo "**********************************************"
	cat hosts

	f_nmap $1

else

	f_checkForScope $1

fi

}


function f_help {

cat << EOF

Usage: lazy <options>

	lazy		No options runs the entire script. See description below.

	-h		What you're looking at.

	-b		Parses every .gnmap file found in subfolders and attempts to grab the banner for every open port.

	-f		Grabs hosts from "scope" or "hosts" files and launches a full nmap TCP scan (on all ports). If it
			detects a regular scan (top ports) has been done already, it skips the top ports.

	-u		Grabs hosts from "scope" or "hosts" files and launches a full nmap UDP scan (on all ports).

	-U		Updates to the latest available version of lazy.

	-i		Installs (and uninstalls) the script (makes a shortcut) so you can use it from anywhere without having the script in the folder.

	-r		Parses every .gnmap file found in subfolders and creates a .csv file with all open ports for easy
			copy and paste to the report.

	-s		Parses every .gnmap file found in subfolders and creates a "services" file showing all open ports.

	-b		Grabs hosts from "scope" or "hosts" files and launches a full nmap UDP scan (on all ports).

			DESCRIPTION: Copy your scope into a file named "scope". Use lazy with no arguments in the same folder
			to create a file named "hosts" with the expanded scope, perform a regular nmap TCP scan, grab the banners
			on all open ports, parse the results to make a "services" file with an organized list of all open ports
			and create a .csv file for easy copy and paste of open ports to your report. Use the options above to only
			parse .gnmap files and perfrom other types of scans.

EOF

exit

}



while getopts ":hifrsbuU" opt; do

	case $opt in

                h)

                        f_help

                        exit

                        ;;

                i)

			if [ -f /usr/bin/lazy ]

			then

				read -p "Already installed. Use the command \"lazy\" from any folder. Would you like to uninstall? <Y/N> " prompt_uninstall


                                if [[ $prompt_uninstall == "y" || $prompt_uninstall == "Y" || $prompt_uninstall == "yes" || $prompt_uninstall == "Yes" ]]

                                then

					rm /usr/bin/lazy
					rm /opt/rey_scripts/lazy.sh

					if [ "$(ls /opt/rey_scripts/)" == "" ]

					then

						rm -rf /opt/rey_scripts/

					fi

					echo "Lazy is uninstalled."

                                else

                                        echo "Ok, bye."

                                fi



			else

			        read -p "Do you want to install this script to use the command \"lazy\" from any folder? <Y/N> " prompt_install

			        if [[ $prompt_install == "y" || $prompt_install == "Y" || $prompt_install == "yes" || $prompt_install == "Yes" ]]   

        			then
					[ -d /opt/rey_scripts ] && : || mkdir /opt/rey_scripts
					cp $0 /opt/rey_scripts/lazy.sh
                			ln -s /opt/rey_scripts/lazy.sh /usr/bin/lazy
					echo "Installed. Test by typing \"lazy -h\"."

        			else

                			echo "Ok, bye."

        			fi

			fi

                        exit

                        ;;


                U)

                        if [ -f /usr/bin/lazy ]

                        then

                                read -p "Would you like to update \"lazy\" to the latest version? <Y/N> " prompt_update


                                if [[ $prompt_update == "y" || $prompt_update == "Y" || $prompt_update == "yes" || $prompt_update == "Yes" ]]

                                then

					[ -s lazy.sh ] && mv lazy.sh lazy_old.sh
					wget https://raw.githubusercontent.com/odlanyer37/pentest-scripts/master/lazy.sh &>/dev/null
					chmod 755 lazy.sh
                                        cp lazy.sh /opt/rey_scripts/lazy.sh
					echo "Update complete."

                                else

                                        echo "Ok, bye."

                                fi

			fi

                        exit

                        ;;


                f)

			flag=$@

			f_start $flag

			exit

                        ;;


                u)

                        flag=$@

                        f_start $flag

                        exit

                        ;;


		r)

			if [ "$(find -name "*gnmap")" != "" ]

			then

				echo "**********************************************"
				echo "Creating open ports table for the report..."
				echo "**********************************************"
				f_services4report

			else

				echo "No \".gnmap\" file to parse."

			fi

                        if [ "$(echo "$@" | sed 's:r:\nr\n:g' |grep -v r |grep -v "-")" == "" ] # Check if -r was the only flag used.

                        then

                                exit

                        fi

                        ;;

		s)

                        if [ "$(find -name "*gnmap")" != "" ]

                        then 

	                        flag=$@
        	                number_of_files=$(find -name "*gnmap" | wc -l)

				echo "**********************************************"
				echo "Looking for services..."
				echo "**********************************************"

                	        for file in $(find -name "*gnmap"); do

                        	        f_services $file $flag $number_of_files

                        	done

                        	if [ "$(echo "$@" | sed 's:s:\ns\n:g' |grep -v s |grep -v "-")" == "" ] # Check if -s was the only flag used.

                        	then
                                	exit

                        	fi


                        else

                                echo "No \".gnmap\" file to parse."

                        fi


			if [ "$(echo "$@" | sed 's:s:\ns\n:g' |grep -v s |grep -v "-")" == "" ] # Check if -s was the only flag used.

			then
				exit

			fi

			;;


                b)

			if [ "$(find -name "*gnmap")" != "" ]

                        then

				echo "**********************************************"
				echo "Grabbing banners..."
				echo "**********************************************"

				[ -s banners ] && cp banners old_banners_temp
				flag=$@
                                for file in $(find -name "*gnmap"); do

                                        f_banners $file $flag

                                done

                                if [ "$(echo "$@" | sed 's:s:\ns\n:g' |grep -v b |grep -v "-")" == "" ] # Check if -b was the only flag used.

                                then
                                        exit

                                fi


                        else

                                echo "No \".gnmap\" file to parse."

                        fi


                        if [ "$(echo "$@" | sed 's:s:\ns\n:g' |grep -v b |grep -v "-")" == "" ] # Check if -b was the only flag used.

                        then
                                exit

                        fi

                        ;;

		\?)

			echo "Invalid option: -$OPTARG" >&2
			f_help
			;;

	esac
done

if [ -z "$1" ] # If an argument was given, show usage.

then
        :
else
        f_help
fi



if [ "$(echo $@)" != "" ] # If flags were used, do not run the whole script.

then

        exit

fi

f_start # START

